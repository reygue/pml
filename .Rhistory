lm(mpg ~ wt + qsec + am, mtcars)
head(mtcars)
tail(mtcars)
View(mtcars)
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("lawstat")
coef(summary(bestfit))
install.packages("MikTex")
install.packages("texmex")
install.packages("MiKTex")
install.packages("TExPosition")
install.packages("latex2exp")
install.packages("pdflatex")
install.packages("textreuse")
install.packages("plotly")
trainingdf   <- read.csv("training.csv", na.strings=c("NA","#DIV/0!", ""))
testingdf <-read.csv("testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
trainingdf <-trainingdf[,colSums(is.na(trainingdf)) == 0]
testingdf <-testingdf[,colSums(is.na(testingdf)) == 0]
trainingdf = trainingdf[,-c(1:7)]
testingdf = testingdf[,-c(1:7)]
trainingdf
dim(trainingdf)
dim(testingdf)
require(caret)
flds = createFolds(classe, k=20, list = TRUE, returnTrain = FALSE)
trainingdf = createFolds(classe, k=20, list = TRUE, returnTrain = FALSE)
trainingdf
dim(trainngdf)
dim(trainingdf)
dim(trainingdf)
trainingdf
rm(list = ls())
dir()
setwd(/DATA/PERSO/coursera/pml)
setwd("/DATA/PERSO/coursera/pml")
dir()
trainingdf   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingdf <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
trainingdf <-trainingdf[,colSums(is.na(trainingdf)) == 0]
testingdf <-testingdf[,colSums(is.na(testingdf)) == 0]
dir()
trainingdf1   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingdf1 <-read.csv("pml-dir()testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
rm(list = ls())
trainingdf1   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingdf1 <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
trainingdf1 <-trainingdf1[,colSums(is.na(trainingdf1)) == 0]
testingdf1 <-testingdf1[,colSums(is.na(testingdf1)) == 0]
trainingdf1
testingdf1
dim(trainingdf1)
testingdf1
inTrain <- createDataPartition(trainingdf1$classe, p=0.6, list=FALSE)
training = trainingdf1[inTrain,]
testing = trainingdf1[-inTrain,]
dim(training)
dim(training),dim(testing)
dim(training);dim(testing)
nonzero = nearZeroVar(training, saveMetrics = TRUE)
training = training[,nonzero$nonzero ==FALSE]
nonzero = nearZeroVar(testing, saveMetrics = TRUE)
testing = testing[,nonzero$nonzero ==FALSE]
training[c(-1)]
training1 <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .7) {
for(j in 1:length(training1)) {
if( length( grep(names(training[i]), names(training1)[j]) ) == 1)  {
training1 <- trainingV3[ , -j]
}
}
}
}
training
dim(training);dim(testing)
dim(trainingdf1)
trainingdf1
summary(trainingdf1)
trainingdf1   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingdf1 <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
trainingdf1 <-trainingdf1[,colSums(is.na(trainingdf1)) == 0]
testingdf1 <-testingdf1[,colSums(is.na(testingdf1)) == 0]
rm(list = ls())
nonzero = nearZeroVar(trainingdf1, saveMetrics=TRUE)
trainingdf1   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingdf1 <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
trainingdf1 <-trainingdf1[,colSums(is.na(trainingdf1)) == 0]
testingdf1 <-testingdf1[,colSums(is.na(testingdf1)) == 0]
nonzero = nearZeroVar(trainingdf1, saveMetrics=TRUE)
training <- trainingdf1[,nonzero$nonzero==FALSE]
nonzero <- nearZeroVar(testingdf1,saveMetrics=TRUE)
testing <- testing[,nonzero$nonzero==FALSE]
nonzero = nearZeroVar(trainingdf1, saveMetrics=TRUE)
training <- trainingdf1[,nonzero$nonzero==FALSE]
nonzero <- nearZeroVar(testingdf1,saveMetrics=TRUE)
testing <- testingdf1[,nonzero$nonzero==FALSE]
training1 <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .7) {
for(j in 1:length(training1)) {
if( length( grep(names(training[i]), names(training1)[j]) ) == 1)  {
training1 <- training1[ , -j]
}
}
}
}
dim(training)
rm(list = ls())
training
dir()
rm(list = ls())
montrain   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
montest <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
inTrain <- createDataPartition(montrain$classe, p=0.6, list=FALSE)
training <- montrain[inTrain, ]
testing <- montest[-inTrain, ]
dim(training); dim(testing)
nonzero = nearZeroVar(training, saveMetrics=TRUE)
training <- training[,nonzero$nonzero==FALSE]
nonzero <- nearZeroVar(testing,saveMetrics=TRUE)
testing <- testingd[,nonzero$nonzero==FALSE]
nonzero = nearZeroVar(training, saveMetrics=TRUE)
training <- training[,nonzero$nonzero==FALSE]
nonzero <- nearZeroVar(testing,saveMetrics=TRUE)
testing <- testing[,nonzero$nonzero==FALSE]
training1 <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .7) {
for(j in 1:length(training1)) {
if( length( grep(names(training[i]), names(training1)[j]) ) == 1)  {
training1 <- training1[ , -j]
}
}
}
}
nonzero = nearZeroVar(training, saveMetrics=TRUE)
training <- training[,nonzero$nonzero==FALSE]
nonzero <- nearZeroVar(testing,saveMetrics=TRUE)
testing <- testing[,nonzero$nonzero==FALSE]
training <- training[c(-1)]
training
ls()
rm(list = list())
rm(list = ls())
ls()
rm(list = ls())
setwd("/DATA/PERSO/coursera/pml")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "/DATA/PERSO/coursera/pml/pml-training.csv", method ="libcurl" )
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "/DATA/PERSO/coursera/pml/pml-testing.csv", method = "libcurl")
rm(list = ls())
montrain   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
montest <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
inTrain <- createDataPartition(montrain$classe, p=0.6, list=FALSE)
training <- montrain[inTrain, ]
testing <- montest[-inTrain, ]
dim(training); dim(testing)
nonzero = nearZeroVar(training, saveMetrics=TRUE)
training <- training[,nonzero$nonzero==FALSE]
nonzero <- nearZeroVar(testing,saveMetrics=TRUE)
testing <- testing[,nonzero$nonzero==FALSE]
training <- training[c(-1)]
training1 <- training
for(i in 1:length(training)) {
if( sum( is.na( training[, i] ) ) /nrow(training) >= .7) {
for(j in 1:length(training1)) {
if( length( grep(names(training[i]), names(training1)[j]) ) == 1)  {
training1 <- training1[ , -j]
}
}
}
}
training
rm(list = ls())
montrain   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
montest <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
inTrain <- createDataPartition(montrain$classe, p=0.6, list=FALSE)
training <- montrain[inTrain, ]
testing <- montest[-inTrain, ]
dim(training); dim(testing)
nonzero = nearZeroVar(training, saveMetrics=TRUE)
training <- training[,nonzero$nonzero==FALSE]
nonzero <- nearZeroVar(testing,saveMetrics=TRUE)
testing <- testing[,nonzero$nonzero==FALSE]
dim(training); dim(testing)
rm(list = ls())
montrain   <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
montest <-read.csv("pml-testing.csv" , na.strings=c("NA", "#DIV/0!", ""))
inTrain <- createDataPartition(montrain$classe, p=0.6, list=FALSE)
training <- montrain[inTrain, ]
testing <- montest[-inTrain, ]
dim(training); dim(testing)
rm(list = ls())
library(caret); library(rattle); library(rpart); library(rpart.plot)
install.packages("rattle")
rm(list = ls())
library(caret); library(rattle); library(rpart); library(rpart.plot)
rm(list = ls())
library(caret); library(rattle); library(rpart); library(rpart.plot)
install.packages("rpart.plot")
rm(list = ls())
library(caret); library(rattle); library(rpart); library(rpart.plot)
library(randomForest); library(repmis)
install.packages("repmis")
rm(list = ls())
library(caret); library(rattle); library(rpart); library(rpart.plot)
library(randomForest); library(repmis)
rm(list = ls())
library(caret); library(rattle); library(rpart); library(rpart.plot)
library(randomForest); library(repmis)
training <- read.csv("pml-training.csv", na.strings = c("NA", ""))
testing <- read.csv("pml-testing.csv", na.strings = c("NA", ""))
training <- training[, colSums(is.na(training)) == 0]
testing <- testing[, colSums(is.na(testing)) == 0]
set.seed(7826)
inTrain <- createDataPartition(trainData$classe, p = 0.7, list = FALSE)
set.seed(7826)
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
train <- trainData[inTrain, ]
set.seed(7826)
inTrain <- createDataPartition(training$classe, p = 0.7, list = FALSE)
train <- training[inTrain, ]
valid <- training[-inTrain, ]
control <- trainControl(method = "cv", number = 5)
fit_rpart <- train(classe ~ ., data = train, method = "rpart",
trControl = control)
print(fit_rpart, digits = 4)
fancyRpartPlot(fit_rpart$finalModel)
# predict outcomes using validation set
predict_rpart <- predict(fit_rpart, valid)
# Show prediction result
(conf_rpart <- confusionMatrix(valid$classe, predict_rpart))
(accuracy_rpart <- conf_rpart$overall[1])
# predict outcomes using validation set
predict_rf <- predict(fit_rf, valid)
modrf <- train(classe ~ ., data = train, method = "rf",
trControl = control)
modrf <- train(classe ~ ., data = train, method = "rf",
trControl = control)
modrf <- train(classe ~ ., data = train, method = "rf")
